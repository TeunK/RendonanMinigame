<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/***************************************************
  CREATE EVENT
***************************************************/
//[TESTMOD] start with unit tests
testmod = "unit-tests";

init_userStats();
username=""; //override username to be empty to ensure that it will be set to something later
/**************************************************/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/***************************************************
  STEP EVENT
***************************************************/
if (testmod == "save-user data")
{
    game_end();
}
/**************************************************/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/***************************************************
  HTTP EVENT
***************************************************/
if (testmod == "server connection")
{
    //FETCH USER DATA FROM HTTP REQUEST
    if (ds_map_find_value(async_load, "id") == http)
    {
        if (ds_map_find_value(async_load, "status") &gt;= 0)
        {
            //[TESTMOD] established connection, change test module to loading user data
            show_message("SUCCESS:#Connection to server was established.");
            testmod = "load-user data";
            
            var user_data
            user_data = ds_map_find_value(async_load, "result");
            user_data = explode_string(user_data,";");
            
            //render user_data array into user stat variables
            read_userdata(user_data);
        }
    }
}
/**************************************************/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/***************************************************
  DRAW EVENT
***************************************************/
draw_text_bg(room_width/2,room_height/2,string("Testing: ")+string(testmod)+string("...#Please Hold."));

if (testmod == "unit-tests")
{
    if (test_exec())
    {
        //[TESTMOD] unit tests passed, proceed to server connection
        testmod = "server connection";
        http = http_get(obj_Controller.load_url);
    }
    else
    {
        game_end();
    }
}

if (testmod == "load-user data")
{
    //test if username was received from server
    if (username != "")
    {
        //[TESTMOD] loaded user data, proceed to saving
        show_message("SUCCESS:#User data was received.");
        testmod = "save-user data";
    }
    else
    {
        //[TESTMOD] failed loading user data, proceed to saving
        show_message("ERROR:#Could not receive user data.#user: "+string(username));
        testmod = "save-user data";
    }
}

if (testmod == "save-user data")
{
    show_message("Tests executed.");
    testmod = "Nothing#Testing was completed.";
}
/**************************************************/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
